/**
 * @license BrowserID-handler https://github.com/flams/browserid-handler
 * The MIT License (MIT)
 * Copyright (c) 2012 Olivier Scherrer <pode.fr@gmail.com>
 */
/**
 * BrowserID-handler https://github.com/flams/browserid-handler
 * The MIT License (MIT)
 * Copyright (c) 2012 Olivier Scherrer <pode.fr@gmail.com>
 */

define("Olives/BrowserID", function () {
	
	/**
	 * The BrowserID constructor
	 * This one should be used on the browser side. It depends on the BrowserID-handler counterpart
	 * that is loaded on the server and will do the verification for you.
	 * @constructor
	 */
	return function BrowserIDConstructor() {
		
		/**
		 * The navigator object that is given by mozilla's script
		 * @private
		 */
		var _navigator = navigator,
		
		/**
		 * The transport object that comes from Olives
		 * @private
		 */
		_transport = null;
		
		/**
		 * Set another navigator than the one given by Mozilla's script
		 * Should only by used for debugging purpose
		 * @private
		 */
		this.setNavigator = function setNavigator(newNavigator) {
			if (newNavigator instanceof Object) {
				_navigator = newNavigator;
				return true;
			} else {
				return false;
			}
		};
		
		/**
		 * Returns the currently used navigator object
		 * Should only by used for debugging purpose
		 * @private
		 */
		this.getNavigator = function getNavigator() {
			return _navigator;
		};
		
		/**
		 * Tells BrowserID which transport to use for issuing the requests
		 * @param {Object} transport the transport object that comes from Olives
		 */
		this.setTransport = function setTransport(transport) {
			if (transport && transport.request instanceof Function) {
				_transport = transport;
				return true;
			} else {
				return false;
			}
		};
		
		/**
		 * Returns the currently used transport
		 */
		this.getTransport = function getTransport() {
			return _transport;
		};
		
		/**
		 * Does the login. It redirects to webpage from mozilla
		 * @param {Function} the callback that will be called for the result
		 * @param {Object} scope the scope in which to execute the callback
		 * @param {Object} params to pass to the navigator.id.get (like allowPersistent)
		 */
		this.login = function login(callback, scope, params) {
			var that = this;
			if (callback instanceof Function) {
				if (_navigator && _navigator.id) {
					_navigator.id.get(function (assertion) {
						that.verify(assertion, callback, scope);	
					}, params);
				} else {
					throw new Error("navigator seems to be missing, check out https://developer.mozilla.org/en/BrowserID/Quick_Setup");
				}
				return true;
			} else {
				return false;
			}
			
		};
		
		/**
		 * The function to verify the assertion
		 * @private
		 */
		this.verify = function verify(assertion, callback, scope) {
			if (_transport) {
				_transport.request("BrowserID", {assertion:assertion}, function (result) {
					callback.call(this, JSON.parse(result));
				}, scope);
			} else {
				throw new Error("a transport must be given to BrowserID before calling its login() function");
			}
		};
		
	};
	
});